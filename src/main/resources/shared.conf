akka {
  log-dead-letters = 10
  log-dead-letters-during-shutdown = on
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-config-on-start = off
  debug {
    receive = on
    autoreceive = on
    lifecycle = on
    unhandled = on
    event-stream = on
  }
  actor {
    provider = "cluster"
    serializers {
      avro-events = "nl.codestar.serializers.AppointmentEventAvroSerializer"
      avro-commands = "nl.codestar.serializers.AvroCommandSerializer"
    }
    serialization-bindings {
      "nl.codestar.domain.AppointmentEvent" = avro-events
      "nl.codestar.domain.AppointmentCommand" = avro-commands
    }
    # 'serialize-messages' should ONLY be used for TESTING
    # Here it is used to force the serialization of all messages to test the disabling of the Java Serialization.
    serialize-messages = on
    serialize-creators = off
    # Switch of the java Serialization
    allow-java-serialization = off
    # https://doc.akka.io/docs/akka/2.5/remoting.html#disabling-the-java-serializer
    # "enable some additional serializers that replace previous Java serialization of some internal messages"
    enable-additional-serialization-bindings = on
  }

  persistence {
    journal {
      plugin = "cassandra-journal"
    }
    snapshot-store {
      plugin = "cassandra-snapshot-store"
    }
    // CONFIGURATION FOR LEVELDB, does not work with multiple servers!
//    journal {
//      plugin = "akka.persistence.journal.leveldb"
//      auto-start-journals = ["akka.persistence.journal.leveldb"]
//      leveldb {
//        dir = "target/journal"
//          event-adapters {
//            tagging = "nl.codestar.persistence.DomainObjectEventAdapter"
//          }
//          event-adapter-bindings {
//            "nl.codestar.domain.AppointmentEvent" = tagging
//          }
//
//      }
//    }
//
//    snapshot-store {
//      plugin = "akka.persistence.snapshot-store.local"
//      auto-start-snapshot-stores = ["akka.persistence.snapshot-store.local"]
//      local {
//        dir = "target/snapshots"
//      }
//    }
  }
  remote {
    log-sent-messages = on
    log-received-messages = on
    log-frame-size-exceeding = 1000b
    log-remote-lifecycle-events = off
  }
}

cassandra-journal {
  contact-points = ["192.168.99.100"]
  log-queries = "on"
  // The event adapters are needed for the tagging of the events!
  event-adapters {
    tagging = "nl.codestar.persistence.DomainObjectEventAdapter"
  }
  event-adapter-bindings {
    "nl.codestar.domain.AppointmentEvent" = tagging
  }

}

cassandra-snapshot-store {
  contact-points = ["192.168.99.100"]
  log-queries = "on"
}
